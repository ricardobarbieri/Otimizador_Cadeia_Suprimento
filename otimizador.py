import streamlit as st
from pulp import LpProblem, LpMinimize, LpVariable, lpSum, value
import pandas as pd
import plotly.express as px

# Configura√ß√£o da p√°gina com t√≠tulo e √≠cone
st.set_page_config(page_title="Calculadora de Transporte F√°cil", page_icon="üöö", layout="centered")

# Estiliza√ß√£o CSS para apelo visual e tamanho aproximado de 800x600px
st.markdown("""
    <style>
    .main { max-width: 800px; max-height: 600px; margin: auto; }
    .stButton>button { background-color: #4CAF50; color: white; font-weight: bold; }
    .stNumberInput>label { font-size: 16px; color: #333; }
    .stSuccess { background-color: #e6ffe6; padding: 10px; border-radius: 5px; }
    .stError { background-color: #ffe6e6; padding: 10px; border-radius: 5px; }
    .title { color: #2E7D32; text-align: center; font-size: 32px; }
    .subtitle { color: #555; font-size: 18px; }
    </style>
""", unsafe_allow_html=True)

# T√≠tulo e descri√ß√£o amig√°veis
st.markdown('<h1 class="title">Calculadora de Transporte F√°cil üöö</h1>', unsafe_allow_html=True)
st.markdown('<p class="subtitle">Descubra a forma mais barata de enviar produtos!</p>', unsafe_allow_html=True)

# Divis√£o em duas colunas para entrada de dados
col1, col2 = st.columns(2)

# Entrada de custos com dicas (tooltips)
with col1:
    st.subheader("üí∞ Custos por Rota (‚Ç¨)")
    custo_x12 = st.number_input("F√°brica 1 ‚û°Ô∏è Cidade 2", min_value=0.0, value=4.0, step=0.1, 
                                help="Custo por unidade enviada da F√°brica 1 para a Cidade 2")
    custo_x13 = st.number_input("F√°brica 1 ‚û°Ô∏è Cidade 3", min_value=0.0, value=6.0, step=0.1, 
                                help="Custo por unidade enviada da F√°brica 1 para a Cidade 3")
    custo_x22 = st.number_input("F√°brica 2 ‚û°Ô∏è Cidade 2", min_value=0.0, value=8.0, step=0.1, 
                                help="Custo por unidade enviada da F√°brica 2 para a Cidade 2")
    custo_x23 = st.number_input("F√°brica 2 ‚û°Ô∏è Cidade 3", min_value=0.0, value=3.0, step=0.1, 
                                help="Custo por unidade enviada da F√°brica 2 para a Cidade 3")

# Entrada de oferta e demanda com emojis
with col2:
    st.subheader("üì¶ Quantidades")
    oferta_o1 = st.number_input("Dispon√≠vel na F√°brica 1", min_value=0, value=100, step=10, 
                                help="Quantidade total que a F√°brica 1 pode enviar")
    oferta_o2 = st.number_input("Dispon√≠vel na F√°brica 2", min_value=0, value=150, step=10, 
                                help="Quantidade total que a F√°brica 2 pode enviar")
    demanda_d2 = st.number_input("Necess√°rio na Cidade 2", min_value=0, value=80, step=10, 
                                 help="Quantidade m√≠nima que a Cidade 2 precisa receber")
    demanda_d3 = st.number_input("Necess√°rio na Cidade 3", min_value=0, value=120, step=10, 
                                 help="Quantidade m√≠nima que a Cidade 3 precisa receber")

# Bot√£o estilizado para calcular
if st.button("Calcular Melhor Plano", key="optimize"):
    with st.spinner("Calculando o plano mais econ√¥mico..."):  # Anima√ß√£o de carregamento
        # Cria o problema de otimiza√ß√£o
        prob = LpProblem("Transporte", LpMinimize)

        # Vari√°veis de decis√£o
        x12 = LpVariable("X12", lowBound=0)
        x13 = LpVariable("X13", lowBound=0)
        x22 = LpVariable("X22", lowBound=0)
        x23 = LpVariable("X23", lowBound=0)

        # Custos inseridos pelo usu√°rio
        custos = {'X12': custo_x12, 'X13': custo_x13, 'X22': custo_x22, 'X23': custo_x23}

        # Fun√ß√£o objetivo: minimizar custo
        prob += lpSum(custos[var.name] * var for var in [x12, x13, x22, x23])

        # Restri√ß√µes
        prob += x12 + x13 <= oferta_o1
        prob += x22 + x23 <= oferta_o2
        prob += x12 + x22 >= demanda_d2
        prob += x13 + x23 >= demanda_d3

        # Resolve
        status = prob.solve()

        # Resultados
        if status == 1:  # Solu√ß√£o √≥tima
            custo_total = value(prob.objective)
            st.markdown('<div class="stSuccess">‚úÖ Plano econ√¥mico encontrado!</div>', unsafe_allow_html=True)
            st.write(f"**Custo Total:** ‚Ç¨{custo_total:.2f}")

            # Tabela de resultados
            resultados = {
                "Rota": ["F√°brica 1 ‚û°Ô∏è Cidade 2", "F√°brica 1 ‚û°Ô∏è Cidade 3", 
                         "F√°brica 2 ‚û°Ô∏è Cidade 2", "F√°brica 2 ‚û°Ô∏è Cidade 3"],
                "Quantidade": [x12.varValue, x13.varValue, x22.varValue, x23.varValue]
            }
            df = pd.DataFrame(resultados)
            st.table(df.style.format({"Quantidade": "{:.1f}"}))

            # Gr√°fico interativo com anima√ß√£o
            fig = px.bar(df, x="Rota", y="Quantidade", 
                         title="üìä Quantidade Enviada por Rota", 
                         text=df["Quantidade"].round(1), 
                         color="Rota", 
                         height=350, width=700,
                         color_discrete_sequence=px.colors.qualitative.Pastel)
            fig.update_traces(textposition='auto', marker=dict(line=dict(width=1, color='DarkSlateGrey')))
            fig.update_layout(showlegend=False, transition={'duration': 500})
            st.plotly_chart(fig)

        else:
            st.markdown('<div class="stError">‚ùå Algo deu errado! Verifique os n√∫meros.</div>', unsafe_allow_html=True)

# Rodap√© com instru√ß√µes simples
st.markdown("---")
st.write("üí° **Como usar:** Insira os custos e quantidades, clique em 'Calcular' e veja o plano mais barato!")